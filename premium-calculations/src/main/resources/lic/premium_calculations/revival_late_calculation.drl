package lic.premium_calculation_rules;

import com.lic.insurance.bff.model.policy.revivalquotation.RevivalLateFee;
import com.lic.insurance.bff.model.policy.revivalquotation.RevivalRates;
import com.lic.insurance.bff.model.policy.revivalquotation.RevivalMonthFactor;
import java.math.BigDecimal;

function BigDecimal getLateFee(BigDecimal premium,Integer noOfDues,double rrFactor,double rmfFactor){
    BigDecimal latefee = new BigDecimal(0.0);
    BigDecimal var1 = premium.multiply(new BigDecimal(rrFactor)).multiply(new BigDecimal(rmfFactor));
    BigDecimal var2 = premium.multiply(new BigDecimal(noOfDues));
    //System.out.println("var1 ::::: "+var1);
    //System.out.println("var2 ::::: "+var2);
    latefee = var1.subtract(var2);
    //System.out.println("latefee ::::: "+latefee);
    return latefee;
}
rule "calculation revival late fee"
  ruleflow-group "calculation-revival-late-fee"
	when
		$rlf:RevivalLateFee()
		$rr:RevivalRates()
		$rmf:RevivalMonthFactor()

	then
	    BigDecimal latefee = new BigDecimal(0.0);
	    //System.out.println("$rlf.getNoOfDues() :: :: "+$rlf.getNoOfDues());
	    //System.out.println("$rr.getFactor() :: :: "+$rr.getFactor());
	    //System.out.println("$rmf.getFactor() :: :: "+$rmf.getFactor());
	    latefee = getLateFee($rlf.getPremium(),$rlf.getNoOfDues(),$rr.getFactor(),$rmf.getFactor());
	    //System.out.println("latefee :: :: "+latefee);
	    $rlf.setLateFee(latefee);
    end
